import speech_recognition as sr
from datetime import datetime
import pyttsx3
import webbrowser

# Initialize the text-to-speech engine
engine = pyttsx3.init()

# Function to speak a given text
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Function to recognize speech using Google Web Speech API
def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        audio = recognizer.listen(source)

    try:
        print("Recognizing...")
        query = recognizer.recognize_google(audio).lower()
        print(f"You said: {query}")
        return query
    except sr.UnknownValueError:
        print("Sorry, I didn't catch that. Please repeat.")
        return None
    except sr.RequestError as e:
        print(f"Could not request results from Google Speech Recognition service; {e}")
        return None

# Function to perform tasks based on user commands
def perform_task(command):
    if "hello" in command:
        speak("Hello! How can I assist you today?")
    elif "give me current time" in command:
        current_time = datetime.now().strftime("%H:%M:%S")
        speak(f"The current time is {current_time}")
    elif "give me today's date" in command:
        current_date = datetime.now().strftime("%Y-%m-%d")
        speak(f"Today's date is {current_date}")
    elif "search" in command:
        query = command.replace("search", "").strip()
        search_url = f"https://www.google.com/search?q={query}"
        speak(f"Searching the web for {query}")
        webbrowser.open(search_url)
    elif "thank you" in command:
            speak("welcome! Have a great day.")    

    else:
        speak("I'm sorry, I don't understand that command. Can you please repeat?")


# Main loop
if __name__ == "__main__":
    speak("Hello! I'm your voice assistant. How can I assist you today?")

    while True:
        user_command = listen()

        if user_command:
            perform_task(user_command)

            # Check if the user wants to exit
            if "thank you" in user_command:
                
                break  # exit the loop and end the program
